{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jakub Sedlak\\\\WebstormProjects\\\\projekt_CP - typescript\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { ThemeProvider, makeStyles, useTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { lightTheme, darkTheme } from '../components/Theme';\nimport { Switch, FormControlLabel, Box, Divider, Drawer, List, ListItem, ListItemIcon, ListItemText, IconButton, AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport clsx from 'clsx';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { auth } from '../firebase';\nimport MenuIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\nimport Link from \"next/link\";\nexport default function MyApp(props) {\n  const {\n    0: theme,\n    1: setTheme\n  } = useState(false); //const [showBtn,setShowBtn] = useState(true);\n\n  const {\n    0: touchDisplay,\n    1: setTouchDisplay\n  } = useState(false);\n  const themeReg = /theme=(\\w+)/;\n  const classes = useTheme();\n  const router = useRouter();\n  useEffect(() => {\n    const themeCookie = document.cookie.match(themeReg);\n    setTouchDisplay(navigator.maxTouchPoints);\n    if (themeCookie) setTheme(JSON.parse(themeCookie[1])); // Remove the server-side injected CSS.\n\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }, []);\n\n  const switchTheme = () => {\n    document.cookie = 'theme=' + !theme;\n    setTheme(!theme);\n  };\n  /*function toggleThemeSwitch(value) {\r\n      setShowBtn(value);\r\n  };*/\n\n\n  const {\n    Component,\n    pageProps\n  } = props;\n  const {\n    0: content,\n    1: setContent\n  } = useState(__jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }));\n  useEffect(() => {\n    if (!touchDisplay) setContent(__jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, __jsx(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"My page\"), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"minimum-scale=1, initial-scale=1, width=device-width\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })), __jsx(ThemeProvider, {\n      theme: theme ? darkTheme : lightTheme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, __jsx(CssBaseline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), __jsx(Component, _extends({\n      theme: theme\n    }, pageProps, {\n      /*setThemeBtn={toggleThemeSwitch.bind(this)}*/\n      switchTheme: switchTheme.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })))));else setContent(__jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Unsuported\"));\n  }, [touchDisplay]);\n  return content;\n}","map":{"version":3,"sources":["C:/Users/Jakub Sedlak/WebstormProjects/projekt_CP - typescript/pages/_app.js"],"names":["React","useEffect","useState","App","Head","useRouter","ThemeProvider","makeStyles","useTheme","CssBaseline","lightTheme","darkTheme","Switch","FormControlLabel","Box","Divider","Drawer","List","ListItem","ListItemIcon","ListItemText","IconButton","AppBar","Toolbar","Typography","VpnKeyIcon","clsx","ChevronRightIcon","ChevronLeftIcon","InboxIcon","MailIcon","auth","MenuIcon","Link","MyApp","props","theme","setTheme","touchDisplay","setTouchDisplay","themeReg","classes","router","themeCookie","document","cookie","match","navigator","maxTouchPoints","JSON","parse","jssStyles","querySelector","parentElement","removeChild","switchTheme","Component","pageProps","content","setContent","bind"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport App from 'next/app';\r\nimport Head from 'next/head';\r\nimport {useRouter} from 'next/router';\r\nimport { ThemeProvider,makeStyles,useTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport {lightTheme,darkTheme} from '../components/Theme';\r\nimport {\r\n    Switch,\r\n    FormControlLabel,\r\n    Box,\r\n    Divider,\r\n    Drawer,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    IconButton,\r\n    AppBar, Toolbar, Typography\r\n} from \"@material-ui/core\";\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport clsx from 'clsx';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport InboxIcon from '@material-ui/icons/Inbox'\r\nimport MailIcon from '@material-ui/icons/Mail'\r\nimport {auth} from '../firebase';\r\nimport MenuIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\r\nimport Link from \"next/link\";\r\n\r\nexport default function MyApp (props) {\r\n\r\n        const [theme,setTheme] = useState(false);\r\n        //const [showBtn,setShowBtn] = useState(true);\r\n        const [touchDisplay,setTouchDisplay] = useState(false);\r\n        const themeReg = /theme=(\\w+)/;\r\n        const classes = useTheme();\r\n        const router = useRouter();\r\n\r\n    useEffect(()=> {\r\n        const themeCookie = document.cookie.match(themeReg);\r\n        setTouchDisplay(navigator.maxTouchPoints);\r\n        if(themeCookie)\r\n            setTheme(JSON.parse(themeCookie[1]));\r\n\r\n        // Remove the server-side injected CSS.\r\n        const jssStyles = document.querySelector('#jss-server-side');\r\n        if (jssStyles) {\r\n            jssStyles.parentElement.removeChild(jssStyles);\r\n        }\r\n    },[]);\r\n\r\n    const switchTheme = () => {\r\n        document.cookie = 'theme='+(!theme);\r\n        setTheme(!theme);\r\n    };\r\n\r\n    /*function toggleThemeSwitch(value) {\r\n        setShowBtn(value);\r\n    };*/\r\n\r\n    const { Component, pageProps } = props;\r\n    const [content,setContent] = useState(<div></div>);\r\n\r\n\r\n    useEffect(() => {\r\n        if(!touchDisplay)\r\n            setContent((\r\n                <React.Fragment>\r\n                    <Head>\r\n                        <title>My page</title>\r\n                        <meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />\r\n                    </Head>\r\n                    <ThemeProvider theme={theme?darkTheme:lightTheme}>\r\n                        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n                        {/*<div style={\r\n                            {display: \"flex\",\r\n                            flexFlow: \"column\",\r\n                            height: \"100vh\"}\r\n                        }>*/}\r\n                        <CssBaseline />\r\n                        <Component theme={theme} {...pageProps} /*setThemeBtn={toggleThemeSwitch.bind(this)}*/ switchTheme={switchTheme.bind(this)} />\r\n                        {/*showBtn?<CustomAppBar component={Component} theme={theme} componentProps={pageProps} text={\"Some name\"}/>:null*/}\r\n\r\n                        {/*showBtn?\r\n                            <FormControlLabel labelPlacement={\"start\"} label={\"Dark mode\"} control={<Switch checked={theme} onChange={switchTheme.bind(this)}/>}/>\r\n                            :null*/}\r\n                        {/*</div>*/}\r\n\r\n                    </ThemeProvider>\r\n                </React.Fragment>\r\n            ));\r\n        else\r\n            setContent((<div>Unsuported</div>));\r\n    },[touchDisplay]);\r\n\r\n    return content;\r\n\r\n}"]},"metadata":{},"sourceType":"module"}