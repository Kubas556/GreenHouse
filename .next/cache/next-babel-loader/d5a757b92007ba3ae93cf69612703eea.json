{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jakub Sedlak\\\\WebstormProjects\\\\projekt_CP\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { lightTheme, darkTheme } from '../components/Theme';\nimport CustomAppBar from \"../components/CustomAppBar\";\nimport { Switch, FormControlLabel, Box } from \"@material-ui/core\";\nimport { auth } from '../firebase/index';\nexport default function MyApp(props) {\n  const {\n    0: theme,\n    1: setTheme\n  } = useState(false);\n  const {\n    0: showBtn,\n    1: setShowBtn\n  } = useState(true);\n  const themeReg = /theme=(\\w+)/;\n  const router = useRouter();\n  useEffect(() => {\n    const themeCookie = document.cookie.match(themeReg);\n    if (themeCookie) setTheme(JSON.parse(themeCookie[1])); // Remove the server-side injected CSS.\n\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }, []);\n\n  const switchTheme = () => {\n    document.cookie = 'theme=' + !theme;\n    setTheme(!theme);\n  };\n\n  function toggleThemeSwitch(value) {\n    setShowBtn(value);\n  }\n\n  ;\n  const {\n    Component,\n    pageProps\n  } = props;\n  return __jsx(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"My page\"), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"minimum-scale=1, initial-scale=1, width=device-width\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), __jsx(ThemeProvider, {\n    theme: theme ? darkTheme : lightTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), showBtn ? __jsx(CustomAppBar, {\n    text: \"Some name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }) : null, __jsx(Box, {\n    height: \"100%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(Component, _extends({}, pageProps, {\n    theme: theme,\n    setThemeBtn: toggleThemeSwitch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }))), showBtn ? __jsx(FormControlLabel, {\n    labelPlacement: \"start\",\n    label: \"Dark mode\",\n    control: __jsx(Switch, {\n      checked: theme,\n      onChange: switchTheme.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }) : null));\n}","map":{"version":3,"sources":["C:/Users/Jakub Sedlak/WebstormProjects/projekt_CP/pages/_app.js"],"names":["React","useEffect","useState","App","Head","useRouter","ThemeProvider","CssBaseline","lightTheme","darkTheme","CustomAppBar","Switch","FormControlLabel","Box","auth","MyApp","props","theme","setTheme","showBtn","setShowBtn","themeReg","router","themeCookie","document","cookie","match","JSON","parse","jssStyles","querySelector","parentElement","removeChild","switchTheme","toggleThemeSwitch","value","Component","pageProps","bind"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport App from 'next/app';\r\nimport Head from 'next/head';\r\nimport {useRouter} from 'next/router';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport {lightTheme,darkTheme} from '../components/Theme';\r\nimport CustomAppBar from \"../components/CustomAppBar\";\r\nimport {Switch,FormControlLabel,Box} from \"@material-ui/core\";\r\nimport {auth} from '../firebase/index';\r\n\r\nexport default function MyApp (props) {\r\n\r\n        const [theme,setTheme] = useState(false);\r\n        const [showBtn,setShowBtn] = useState(true);\r\n        const themeReg = /theme=(\\w+)/;\r\n        const router = useRouter();\r\n\r\n    useEffect(()=> {\r\n        const themeCookie = document.cookie.match(themeReg);\r\n\r\n        if(themeCookie)\r\n            setTheme(JSON.parse(themeCookie[1]));\r\n\r\n        // Remove the server-side injected CSS.\r\n        const jssStyles = document.querySelector('#jss-server-side');\r\n        if (jssStyles) {\r\n            jssStyles.parentElement.removeChild(jssStyles);\r\n        }\r\n    },[]);\r\n\r\n    const switchTheme = () => {\r\n        document.cookie = 'theme='+(!theme);\r\n        setTheme(!theme);\r\n    };\r\n\r\n    function toggleThemeSwitch(value) {\r\n        setShowBtn(value);\r\n    };\r\n\r\n    const { Component, pageProps } = props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Head>\r\n                    <title>My page</title>\r\n                    <meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />\r\n                </Head>\r\n                <ThemeProvider theme={theme?darkTheme:lightTheme}>\r\n                    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n                    {/*<div style={\r\n                        {display: \"flex\",\r\n                        flexFlow: \"column\",\r\n                        height: \"100vh\"}\r\n                    }>*/}\r\n                    <CssBaseline />\r\n                    {showBtn?<CustomAppBar text={\"Some name\"}/>:null}\r\n                    <Box height={\"100%\"}>\r\n                        <Component {...pageProps} theme={theme} setThemeBtn={toggleThemeSwitch} />\r\n                    </Box>\r\n                    {showBtn?\r\n                        <FormControlLabel labelPlacement={\"start\"} label={\"Dark mode\"} control={<Switch checked={theme} onChange={switchTheme.bind(this)}/>}/>\r\n                        :null}\r\n                    {/*</div>*/}\r\n                </ThemeProvider>\r\n            </React.Fragment>\r\n        );\r\n\r\n}"]},"metadata":{},"sourceType":"module"}