{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { ThemeProvider, makeStyles, useTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { lightTheme, darkTheme } from '../components/Theme';\nimport { Switch, FormControlLabel, Box, Divider, Drawer, List, ListItem, ListItemIcon, ListItemText, IconButton, AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport clsx from 'clsx';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { auth } from '../firebase';\nimport MenuIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\nimport Link from \"next/link\";\nexport default function MyApp(props) {\n  var _this = this;\n\n  var _useState = useState(false),\n      theme = _useState[0],\n      setTheme = _useState[1]; //const [showBtn,setShowBtn] = useState(true);\n\n\n  var _useState2 = useState(false),\n      touchDisplay = _useState2[0],\n      setTouchDisplay = _useState2[1];\n\n  var themeReg = /theme=(\\w+)/;\n  var classes = useTheme();\n  var router = useRouter();\n  useEffect(function () {\n    var themeCookie = document.cookie.match(themeReg);\n    setTouchDisplay(navigator.maxTouchPoints);\n    if (themeCookie) setTheme(JSON.parse(themeCookie[1])); // Remove the server-side injected CSS.\n\n    var jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }, []);\n\n  var switchTheme = function switchTheme() {\n    document.cookie = 'theme=' + !theme;\n    setTheme(!theme);\n  };\n  /*function toggleThemeSwitch(value) {\r\n      setShowBtn(value);\r\n  };*/\n\n\n  var Component = props.Component,\n      pageProps = props.pageProps;\n\n  var _useState3 = useState(__jsx(\"div\", null)),\n      content = _useState3[0],\n      setContent = _useState3[1];\n\n  useEffect(function () {\n    if (!touchDisplay) setContent(__jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My page\"), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n    })), __jsx(ThemeProvider, {\n      theme: theme ? darkTheme : lightTheme\n    }, __jsx(CssBaseline, null), __jsx(Component, _extends({\n      theme: theme\n    }, pageProps, {\n      /*setThemeBtn={toggleThemeSwitch.bind(this)}*/\n      switchTheme: switchTheme.bind(_this)\n    })))));else setContent(__jsx(\"div\", null, \"Unsuported\"));\n  }, [touchDisplay]);\n  return content;\n}","map":null,"metadata":{},"sourceType":"module"}