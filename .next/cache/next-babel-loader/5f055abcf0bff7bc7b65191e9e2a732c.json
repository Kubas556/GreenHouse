{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { lightTheme, darkTheme } from '../components/Theme';\nimport CustomAppBar from \"../components/CustomAppBar\";\nimport { Switch, FormControlLabel, Box } from \"@material-ui/core\";\n\nvar MyApp =\n/*#__PURE__*/\nfunction (_App) {\n  _inherits(MyApp, _App);\n\n  function MyApp(props) {\n    var _this;\n\n    _classCallCheck(this, MyApp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyApp).call(this, props));\n    _this.state = {\n      theme: false,\n      showBtn: true,\n      session: null,\n      edit: 0\n    };\n    _this.themeReg = /theme=(\\w+)/;\n    _this.sessionReg = /sessionID-NEKRAST!=(\\w+)/;\n    _this.editReg = /edit=(\\w+)/;\n    return _this;\n  }\n\n  _createClass(MyApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var themeCookie = document.cookie.match(this.themeReg);\n      var sessionCookie = document.cookie.match(this.sessionReg);\n      var editCookie = document.cookie.match(this.editReg);\n      this.pathname = Router.pathname;\n      if (themeCookie) this.setState(function (state) {\n        return {\n          theme: JSON.parse(themeCookie[1])\n        };\n      });\n\n      if (sessionCookie) {\n        this.setState(function (state) {\n          return {\n            session: sessionCookie[1]\n          };\n        });\n      } else {\n        Router.push(\"/login\");\n      }\n\n      if (editCookie) {\n        this.setState(function (state) {\n          return {\n            edit: editCookie[1]\n          };\n        });\n      }\n\n      if (this.state.edit === 0 && (Router.pathname === \"/editroom\" || Router.pathname === \"/editperson\")) Router.push(\"/login\"); // Remove the server-side injected CSS.\n\n      var jssStyles = document.querySelector('#jss-server-side');\n\n      if (jssStyles) {\n        jssStyles.parentElement.removeChild(jssStyles);\n      }\n    }\n  }, {\n    key: \"switchTheme\",\n    value: function switchTheme() {\n      var _this2 = this;\n\n      this.setState(function (state) {\n        document.cookie = 'theme=' + !_this2.state.theme;\n        return {\n          theme: !state.theme\n        };\n      });\n    }\n  }, {\n    key: \"toggleThemeSwitch\",\n    value: function toggleThemeSwitch(value) {\n      this.setState(function (state) {\n        return {\n          showBtn: value\n        };\n      });\n    }\n  }, {\n    key: \"changeSession\",\n    value: function changeSession(value) {\n      this.setState(function (state) {\n        document.cookie = \"sessionID-NEKRAST!=\" + value.session;\n        document.cookie = \"edit=\" + value.edit;\n        return {\n          session: value.session,\n          edit: value.edit\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps;\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My page\"), __jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n      })), __jsx(ThemeProvider, {\n        theme: this.state.theme ? darkTheme : lightTheme\n      }, __jsx(CssBaseline, null), this.state.showBtn ? __jsx(CustomAppBar, {\n        text: \"Logged as: \" + this.state.session\n      }) : null, __jsx(Box, {\n        height: \"100%\"\n      }, __jsx(Component, _extends({}, pageProps, {\n        session: this.state.session,\n        edit: this.state.edit,\n        changeSess: this.changeSession.bind(this),\n        setThemeBtn: this.toggleThemeSwitch.bind(this)\n      }))), this.state.showBtn ? __jsx(FormControlLabel, {\n        labelPlacement: \"start\",\n        label: \"Dark mode\",\n        control: __jsx(Switch, {\n          checked: this.state.theme,\n          onChange: this.switchTheme.bind(this)\n        })\n      }) : null));\n    }\n  }]);\n\n  return MyApp;\n}(App);\n\nexport { MyApp as default };","map":null,"metadata":{},"sourceType":"module"}