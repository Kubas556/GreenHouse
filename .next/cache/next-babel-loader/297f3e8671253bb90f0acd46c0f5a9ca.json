{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { lightTheme, darkTheme } from '../components/Theme';\nimport CustomAppBar from \"../components/CustomAppBar\";\nimport { Switch, FormControlLabel, Box } from \"@material-ui/core\";\nexport default class MyApp extends App {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: false,\n      showBtn: true,\n      session: null,\n      edit: 0\n    };\n    this.themeReg = /theme=(\\w+)/;\n    this.sessionReg = /sessionID-NEKRAST!=(\\w+)/;\n    this.editReg = /edit=(\\w+)/;\n  }\n\n  componentDidMount() {\n    const themeCookie = document.cookie.match(this.themeReg);\n    const sessionCookie = document.cookie.match(this.sessionReg);\n    const editCookie = document.cookie.match(this.editReg);\n    this.pathname = Router.pathname;\n    if (themeCookie) this.setState(state => {\n      return {\n        theme: JSON.parse(themeCookie[1])\n      };\n    });\n\n    if (sessionCookie) {\n      this.setState(state => {\n        return {\n          session: sessionCookie[1]\n        };\n      });\n    } else {\n      Router.push(\"/login\");\n    }\n\n    if (editCookie) {\n      this.setState(state => {\n        return {\n          edit: editCookie[1]\n        };\n      });\n    }\n\n    if (this.state.edit === 0 && (Router.pathname === \"/editroom\" || Router.pathname === \"/editperson\")) Router.push(\"/login\"); // Remove the server-side injected CSS.\n\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }\n\n  switchTheme() {\n    this.setState(state => {\n      document.cookie = 'theme=' + !this.state.theme;\n      return {\n        theme: !state.theme\n      };\n    });\n  }\n\n  toggleThemeSwitch(value) {\n    this.setState(state => {\n      return {\n        showBtn: value\n      };\n    });\n  }\n\n  changeSession(value) {\n    this.setState(state => {\n      document.cookie = \"sessionID-NEKRAST!=\" + value.session;\n      document.cookie = \"edit=\" + value.edit;\n      return {\n        session: value.session,\n        edit: value.edit\n      };\n    });\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My page\"), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n    })), __jsx(ThemeProvider, {\n      theme: this.state.theme ? darkTheme : lightTheme\n    }, __jsx(CssBaseline, null), this.state.showBtn ? __jsx(CustomAppBar, {\n      text: \"Logged as: \" + this.state.session\n    }) : null, __jsx(Box, {\n      height: \"100%\"\n    }, __jsx(Component, _extends({}, pageProps, {\n      session: this.state.session,\n      edit: this.state.edit,\n      changeSess: this.changeSession.bind(this),\n      setThemeBtn: this.toggleThemeSwitch.bind(this)\n    }))), this.state.showBtn ? __jsx(FormControlLabel, {\n      labelPlacement: \"start\",\n      label: \"Dark mode\",\n      control: __jsx(Switch, {\n        checked: this.state.theme,\n        onChange: this.switchTheme.bind(this)\n      })\n    }) : null));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}