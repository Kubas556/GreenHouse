{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport anime from \"animejs\";\nimport { useTheme } from \"@material-ui/styles\";\n\nfunction Termostat(props) {\n  const min = 0;\n  const max = 50;\n  const componentWidth = 337;\n  const componentHeight = 337;\n  const minAngle = 0;\n  const maxAngle = 270;\n  const angleOverlap = (maxAngle - 180) / 2;\n  const lineSegCount = 25; //11;\n\n  const valueLineSegCount = 16 * 2 + 1;\n  const valueLineSegBigEach = 8;\n  const theme = useTheme(); // @ts-ignore\n\n  const handleColor = theme.palette.primary.main;\n  const lines = useRef(null);\n  const valueInput = useRef(null);\n  const hand = useRef(null);\n  const handle = useRef(null);\n  const {\n    0: containers,\n    1: setContainers\n  } = useState();\n  const {\n    0: lastNode,\n    1: setLastNode\n  } = useState();\n  const {\n    0: lastNodeAngle,\n    1: setLastNodeAngle\n  } = useState(0);\n  const {\n    0: angleTrans,\n    1: setAngleTrans\n  } = useState(0);\n  const {\n    0: currentAngle,\n    1: setCurrentAngle\n  } = useState(0);\n  const {\n    0: handAngle,\n    1: setHandAngle\n  } = useState(0);\n  const {\n    0: currentValue,\n    1: setCurrentValue\n  } = useState(0);\n  const {\n    0: drag,\n    1: setDrag\n  } = useState(false);\n  const {\n    0: initialize,\n    1: setInitialize\n  } = useState(true);\n  const workspaceSize = {\n    height: componentHeight + \"px\",\n    width: componentWidth + \"px\"\n  };\n  const linesSize = {\n    width: componentWidth + \"px\"\n  };\n  const lineContainerSizes = {\n    width: componentWidth / 2 + \"px\"\n  };\n  const handPathSize = {\n    width: componentWidth / 3 + \"px\",\n    height: componentHeight / 3 + \"px\"\n  };\n  const handSize = {\n    width: componentWidth / 2 + \"px\"\n  };\n  const handleSize = {\n    right: componentWidth / 2 / 3 + \"px\"\n  };\n  const handPathCircle = {\n    circleRadius: 2 * Math.PI * 80.6,\n    transform: \"rotate(\" + -angleOverlap + \"deg)\",\n    maxRadius: 2 * Math.PI * 80.6 - 2 * Math.PI * 80.6 / 360 * maxAngle\n  };\n\n  function inputUpdated(e) {\n    let val = Number.parseInt(e.target.innerHTML);\n    setCurrentValue(val);\n    setCurrentAngle(maxAngle / max * val - angleOverlap);\n  }\n\n  function onMove(e) {\n    if (drag) {\n      let angle = Math.atan2(e.nativeEvent.offsetY - componentHeight / 2, e.nativeEvent.offsetX - componentWidth / 2);\n      let angle2 = angle * (180 / Math.PI); //to 360 range\n\n      if (angle2 < 0) {\n        angle2 = 360 - -angle2;\n      } //set 0 angle\n\n\n      angle2 += 180; //corect angle\n\n      if (angle2 > 360) angle2 -= 360;\n      angle2 = maxAngle - angle2;\n      if (angle2 < 0) angle2 = angleOverlap - (360 - maxAngle + angle2);else angle2 = -(angle2 - maxAngle - angleOverlap);\n      console.log(angle2);\n\n      if (angle2 >= minAngle && angle2 <= maxAngle) {\n        setCurrentValue(Math.round(max / maxAngle * angle2));\n        setAngleTrans(angle2 - angleOverlap);\n        setHandAngle(angle2 - angleOverlap);\n      }\n    }\n  }\n\n  function onDrag(e) {\n    if (!drag) {\n      setDrag(true);\n      if (handle.current) handle.current.style.pointerEvents = \"none\";\n    }\n  }\n\n  function onDragEnd(e) {\n    if (drag) {\n      setDrag(false);\n      if (handle.current) handle.current.style.pointerEvents = \"all\";\n    }\n  }\n\n  useEffect(() => {\n    if (containers) {\n      let angle = Math.round(handAngle);\n\n      if (angle <= maxAngle && angle >= minAngle - angleOverlap) {\n        for (let i = 0; i < containers.length; i++) {\n          let containerAngle = parseInt(containers[i].getAttribute('rotate'));\n\n          if (containerAngle > lastNodeAngle && containerAngle <= angle || containerAngle < lastNodeAngle && angle <= containerAngle) {\n            anime({\n              targets: lastNode,\n              scale: [{\n                value: 1,\n                easing: 'easeInOutQuad',\n                duration: 500\n              }],\n              delay: 0\n            });\n            anime({\n              targets: containers[i].childNodes[0],\n              scale: [{\n                value: 1.5,\n                easing: 'easeOutSine',\n                duration: 500\n              }],\n              delay: 0\n            });\n            setLastNode(containers[i].childNodes[0]);\n            setLastNodeAngle(containerAngle);\n            break;\n          }\n        }\n\n        ;\n        if (hand.current) hand.current.style.transform = \"rotate(\" + angle + \"deg)\";\n      }\n    }\n  }, [handAngle]);\n  useEffect(() => {\n    let anim = {\n      value: angleTrans\n    };\n    anime({\n      targets: anim,\n      value: currentAngle,\n      easing: \"linear\",\n      duration: 500,\n      update: function () {\n        //updateHandAngle(anim.value);\n        setHandAngle(anim.value);\n      },\n      complete: () => {\n        setAngleTrans(currentAngle);\n      }\n    });\n  }, [currentAngle]);\n  useEffect(() => {\n    if (valueInput.current) valueInput.current.innerHTML = currentValue.toString();\n    if (!initialize) props.onValueChanged(Number.parseInt(currentValue.toString()));\n  }, [currentValue]);\n  useEffect(() => {\n    let initValue = props.defaultValue;\n\n    if (initValue != undefined) {\n      let k = 0;\n\n      for (let i = 0; i < valueLineSegCount; i++) {\n        let handAngle = Math.round(maxAngle / max * k) - angleOverlap;\n        let line = '<div style=\"transform:rotate(' + handAngle + 'deg)!important;width:' + lineContainerSizes.width + ';\" class=\"valueLineContainer\">' + '<div class=\"valueLineGroup\">' + '<div class=' + (i % valueLineSegBigEach == 0 ? \"bigValueLine\" : \"smallValueLine\") + '></div>' + '<div class=\"value\" style=\"transform:rotate(' + -handAngle + 'deg)\">' + (i % valueLineSegBigEach == 0 ? Math.round(k) : \"\") + '</div>' + '</div>' + '</div>';\n        if (lines.current) lines.current.innerHTML += line;\n        k += max / (valueLineSegCount - 1);\n      }\n\n      let j = 0;\n\n      for (let i = 0; i < lineSegCount; i++) {\n        let handAngle = Math.round(maxAngle / max * j) - angleOverlap;\n        let line = '<div rotate=' + handAngle + ' style=\"transform:rotate(' + handAngle + 'deg)!important;width:' + lineContainerSizes.width + ';\" class=\"lineContainer\">' + '<div class=\"line\"></div>' + '</div>';\n        if (lines.current) lines.current.innerHTML += line;\n        j += max / (lineSegCount - 1);\n      }\n\n      let contData = document.getElementsByClassName('lineContainer');\n      let initlastNode = contData[0].childNodes[0];\n      let initLastNodeAngle = 0;\n      anime({\n        targets: contData[0].childNodes[0],\n        scale: [{\n          value: 1.5,\n          easing: 'easeOutSine',\n          duration: 500\n        }],\n        delay: 0\n      });\n      let lineSegs = document.getElementsByClassName(\"line\");\n      const first = [73, 80, 245];\n      const second = [244, 67, 54];\n\n      for (let i = 0; i < lineSegs.length; i++) {\n        var percent = i / (lineSegs.length - 1);\n        var red = first[0] + percent * (second[0] - first[0]);\n        var green = first[1] + percent * (second[1] - first[1]);\n        var blue = first[2] + percent * (second[2] - first[2]);\n        lineSegs[i].setAttribute(\"style\", \"background:\" + \"rgb(\" + red + \",\" + green + \",\" + blue + \");\");\n      }\n\n      ;\n      setContainers(contData);\n\n      const updateHandAngle = angle => {\n        angle = Math.round(angle);\n\n        if (angle <= maxAngle && angle >= minAngle) {\n          for (let i = 0; i < contData.length; i++) {\n            let containerAngle = parseInt(contData[i].getAttribute('rotate'));\n\n            if (containerAngle > initLastNodeAngle && containerAngle <= angle || containerAngle < initLastNodeAngle && angle <= containerAngle) {\n              anime({\n                targets: initlastNode,\n                scale: [{\n                  value: 1,\n                  easing: 'easeInOutQuad',\n                  duration: 500\n                }],\n                delay: 0\n              });\n              anime({\n                targets: contData[i].childNodes[0],\n                scale: [{\n                  value: 1.5,\n                  easing: 'easeOutSine',\n                  duration: 500\n                }],\n                delay: 0\n              });\n              initlastNode = contData[i].childNodes[0];\n              initLastNodeAngle = containerAngle;\n              break;\n            }\n          }\n\n          ; //document.getElementById(\"hand\").style.transform=\"rotate(\"+(angle)+\"deg)\";\n        }\n      };\n\n      let initAngleTrans = {\n        value: 0\n      };\n      anime({\n        targets: initAngleTrans,\n        value: maxAngle / max * initValue,\n        easing: \"linear\",\n        duration: 500,\n        update: function () {\n          updateHandAngle(initAngleTrans.value);\n        },\n        complete: function () {\n          setLastNode(initlastNode);\n          setLastNodeAngle(initLastNodeAngle);\n\n          if (initValue != undefined) {\n            setCurrentValue(initValue);\n            setCurrentAngle(maxAngle / max * initValue - angleOverlap);\n          }\n\n          setInitialize(false);\n        }\n      });\n    }\n  }, [props.defaultValue]);\n  return __jsx(\"div\", {\n    className: \"jsx-1771400329\"\n  }, __jsx(\"div\", {\n    id: \"work\",\n    onMouseMove: onMove,\n    onMouseUp: onDragEnd,\n    style: workspaceSize,\n    className: \"jsx-1771400329\" + \" \" + \"workspace\"\n  }, __jsx(\"svg\", {\n    id: \"handPath\",\n    style: handPathSize,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 161.45 161.45\",\n    className: \"jsx-1771400329\"\n  }, __jsx(\"defs\", {\n    className: \"jsx-1771400329\"\n  }, __jsx(\"style\", null, \".pathcircle{fill:none;stroke:\" + (props.theme == 1 ? \"white\" : \"black\") + \";stroke-miterlimit:10;stroke-opacity:0.08;stroke-width:3px;}\")), __jsx(\"title\", {\n    className: \"jsx-1771400329\"\n  }, \"Datov\\xFD zdroj 22\"), __jsx(\"g\", {\n    id: \"Vrstva_2\",\n    \"data-name\": \"Vrstva 2\",\n    className: \"jsx-1771400329\"\n  }, __jsx(\"g\", {\n    id: \"Vrstva_2-2\",\n    \"data-name\": \"Vrstva 2\",\n    className: \"jsx-1771400329\"\n  }, __jsx(\"circle\", {\n    cx: \"80.73\",\n    cy: \"80.73\",\n    r: \"80.6\",\n    style: {\n      transform: handPathCircle.transform,\n      transformOrigin: \"center\"\n    },\n    strokeDasharray: handPathCircle.circleRadius,\n    strokeDashoffset: handPathCircle.maxRadius,\n    className: \"jsx-1771400329\" + \" \" + \"pathcircle\"\n  })))), __jsx(\"div\", {\n    ref: lines,\n    id: \"lines\",\n    style: linesSize,\n    className: \"jsx-1771400329\"\n  }), __jsx(\"div\", {\n    ref: hand,\n    id: \"hand\",\n    style: handSize,\n    className: \"jsx-1771400329\"\n  }, __jsx(\"svg\", {\n    ref: handle,\n    onMouseDown: onDrag,\n    id: \"handle\",\n    style: handleSize,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 26.04 26.04\",\n    className: \"jsx-1771400329\"\n  }, __jsx(\"defs\", {\n    className: \"jsx-1771400329\"\n  }, __jsx(\"style\", null, \".handle{fill:\" + handleColor + \"}\")), __jsx(\"title\", {\n    className: \"jsx-1771400329\"\n  }, \"Datov\\xFD zdroj 25\"), __jsx(\"g\", {\n    id: \"Vrstva_2\",\n    \"data-name\": \"Vrstva 2\",\n    className: \"jsx-1771400329\"\n  }, __jsx(\"g\", {\n    id: \"Vrstva_2-2\",\n    \"data-name\": \"Vrstva 2\",\n    className: \"jsx-1771400329\"\n  }, __jsx(\"circle\", {\n    cx: \"13.02\",\n    cy: \"13.02\",\n    r: \"13.02\",\n    className: \"jsx-1771400329\" + \" \" + \"handle\"\n  }))))), __jsx(\"div\", {\n    className: \"jsx-1771400329\" + \" \" + \"valueGroup\"\n  }, __jsx(\"p\", {\n    className: \"jsx-1771400329\"\n  }, __jsx(\"span\", {\n    ref: valueInput,\n    style: {\n      pointerEvents: \"all\"\n    },\n    onBlur: inputUpdated,\n    contentEditable: true,\n    className: \"jsx-1771400329\"\n  }), __jsx(\"span\", {\n    className: \"jsx-1771400329\"\n  }, \"\\xB0C\")))), __jsx(\"style\", null, \".smallValueLine,.bigValueLine{background:\" + (props.theme == 1 ? \"white\" : \"black\") + \"}\"), __jsx(_JSXStyle, {\n    id: \"1771400329\"\n  }, [\".workspace{background:none;margin:auto;position:relative;border-radius:100%;}\", \".workspace .valueGroup{position:absolute;margin:0px;margin-top:50%;margin-left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:2rem;}\", \"#lines,#handPath,.lineContainer,.valueLineContainer,.valueGroup{pointer-events:none;overflow:visible;}\", \"#handPath{width:5rem;height:5rem;}\", \"#lines{position:absolute;height:0px;margin-top:50%;}\", \".lineContainer,.valueLineContainer{height:0;position:absolute;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-transform-origin:right center;-ms-transform-origin:right center;transform-origin:right center;}\", \".line{height:5px;width:2rem;margin-left:0.5rem;-webkit-transform-origin:right center;-ms-transform-origin:right center;transform-origin:right center;}\", \".smallValueLine{height:2px;width:0.5rem;margin-left:3.5rem;opacity:0.2;}\", \".bigValueLine{height:2px;width:1rem;margin-left:3.5rem;opacity:0.2;}\", \".valueLineGroup{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}\", \".value{margin-left:0.5rem;}\", \"#handPath{margin:50%;-webkit-transform:translate(-50%,-50%)rotate(180deg);-ms-transform:translate(-50%,-50%)rotate(180deg);transform:translate(-50%,-50%)rotate(180deg);position:absolute;}\", \"#hand{margin-top:50%;background:red;-webkit-transform-origin:right center;-ms-transform-origin:right center;transform-origin:right center;position:absolute;height:0;}\", \"#handle{cursor:-webkit-grab;cursor:-moz-grab;cursor:grab;width:2rem;height:2rem;-webkit-transform:translate(50%,-50%);-ms-transform:translate(50%,-50%);transform:translate(50%,-50%);right:50%;position:absolute;}\"]));\n}\n\nexport default Termostat;","map":null,"metadata":{},"sourceType":"module"}