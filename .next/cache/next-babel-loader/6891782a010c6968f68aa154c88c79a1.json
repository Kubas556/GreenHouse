{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { ThemeProvider, makeStyles, useTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { lightTheme, darkTheme } from '../components/Theme';\nimport { Switch, FormControlLabel, Box, Divider, Drawer, List, ListItem, ListItemIcon, ListItemText, IconButton, AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport clsx from 'clsx';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { auth } from '../firebase';\nimport MenuIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\nimport Link from \"next/link\";\nexport default function MyApp(props) {\n  const {\n    0: theme,\n    1: setTheme\n  } = useState(false); //const [showBtn,setShowBtn] = useState(true);\n\n  const themeReg = /theme=(\\w+)/;\n  const classes = useTheme();\n  const router = useRouter();\n  const {\n    0: touchDisplay,\n    1: setTouchDisplay\n  } = useState(false);\n  const {\n    0: content,\n    1: setContent\n  } = useState(__jsx(\"div\", null));\n  useEffect(() => {\n    const themeCookie = document.cookie.match(themeReg);\n    setTouchDisplay(navigator.maxTouchPoints);\n    if (themeCookie) setTheme(JSON.parse(themeCookie[1])); // Remove the server-side injected CSS.\n\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }, []);\n\n  const switchTheme = () => {\n    document.cookie = 'theme=' + !theme + \";path=/\";\n    setTheme(!theme);\n  };\n  /*function toggleThemeSwitch(value) {\r\n      setShowBtn(value);\r\n  };*/\n\n\n  const {\n    Component,\n    pageProps\n  } = props;\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My page\"), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n  })), __jsx(ThemeProvider, {\n    theme: theme ? darkTheme : lightTheme\n  }, __jsx(CssBaseline, null), __jsx(Component, _extends({\n    theme: theme,\n    touchDisplay: touchDisplay\n  }, pageProps, {\n    /*setThemeBtn={toggleThemeSwitch.bind(this)}*/\n    switchTheme: switchTheme.bind(this)\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}