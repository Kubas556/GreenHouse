{"ast":null,"code":"var __jsx = React.createElement;\nimport { Container, TextField, Grid, Paper, Button, Typography, Fab } from '@material-ui/core';\nimport { useRouter } from 'next/router';\nimport { auth, firebase } from '../firebase/index';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useState, useEffect } from \"react\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    header: {\n      paddingTop: '1rem'\n    },\n    fab: {\n      position: 'absolute',\n      bottom: theme.spacing(2),\n      left: theme.spacing(2)\n    }\n  };\n});\n\nfunction Login(props) {\n  var _useState = useState(),\n      username = _useState[0],\n      setUsername = _useState[1];\n\n  var _useState2 = useState(),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(false),\n      missingError = _useState3[0],\n      setMissingError = _useState3[1];\n\n  var _useState4 = useState(false),\n      loginError = _useState4[0],\n      setLoginError = _useState4[1];\n\n  var classes = useStyles();\n  var router = useRouter();\n  useEffect(function () {//props.setThemeBtn(false);\n  }, []);\n\n  var handleSignIn = function handleSignIn() {\n    var provider = new firebase.auth.GoogleAuthProvider();\n    provider.addScope('https://www.googleapis.com/auth/contacts.readonly');\n    auth.signInWithPopup(provider).then(function () {\n      alert('You are signed In');\n      router.push('/');\n    })[\"catch\"](function (err) {\n      alert('OOps something went wrong check your console');\n      console.log(err);\n    });\n  };\n\n  var submitForm = function submitForm() {\n    handleSignIn();\n    /*setLoginError(false);\r\n    setMissingError(false);\r\n    if(!username||!password) {\r\n        setMissingError(true);\r\n    } else {\r\n        fetch(\"http://a2017sedlja.delta-studenti.cz/projektAPI/validate.php\", {method:\"POST\",headers:{USERNAME: username,PASSWORD: password}}).then(checkStatus).then(r=>r.json()).then(j => {\r\n            if(j.error) {\r\n                cosnole.log(j.error);\r\n            } else {\r\n                props.changeSess({\r\n                    session:j[0],\r\n                    edit:j[1]\r\n                });\r\n                router.push('/');\r\n            }\r\n        });\r\n    }*/\n  }; // @ts-ignore\n\n\n  return __jsx(\"div\", null, __jsx(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    style: {\n      minHeight: '100vh',\n      position: 'absolute'\n    }\n  }, __jsx(Container, {\n    maxWidth: \"xs\"\n  }, __jsx(Paper, {\n    className: // @ts-ignore\n    classes.paper\n  }, __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n      submitForm();\n    }\n  }, __jsx(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"center\",\n    spacing: 2\n  }, __jsx(Typography, {\n    className: classes.header,\n    variant: \"h4\"\n  }, \"Login\"), __jsx(Grid, {\n    item: true\n  }, __jsx(TextField, {\n    error: !username && missingError || loginError,\n    fullWidth: true,\n    helperText: !username && missingError ? \"required\" : null,\n    variant: \"outlined\",\n    label: \"Username\",\n    type: \"text\",\n    onChange: function onChange(e) {\n      // @ts-ignore\n      setUsername(e.target.value);\n    },\n    name: \"username\"\n  })), __jsx(Grid, {\n    item: true\n  }, __jsx(TextField, {\n    error: !password && missingError || loginError,\n    fullWidth: true,\n    helperText: !password && missingError ? \"required\" : null,\n    variant: \"outlined\",\n    label: \"Password\",\n    type: \"password\",\n    onChange: function onChange(e) {\n      // @ts-ignore\n      setPassword(e.target.value);\n    },\n    name: \"password\"\n  })), __jsx(Grid, {\n    item: true\n  }, __jsx(\"input\", {\n    style: {\n      display: \"none\"\n    },\n    id: \"submit-btn\",\n    type: \"submit\"\n  }), __jsx(\"label\", {\n    htmlFor: \"submit-btn\"\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    component: \"span\"\n  }, \"Login\")))))), __jsx(Fab, {\n    onClick: function onClick() {\n      router.back();\n    },\n    variant: \"extended\",\n    color: \"secondary\",\n    className: classes.fab\n  }, __jsx(ArrowBackIcon, null), \"Back to app\"))));\n}\n/*Login.getInitialProps = ({query}:NextApiRequest) => {\r\n    return{query:query}\r\n}*/\n\n\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}