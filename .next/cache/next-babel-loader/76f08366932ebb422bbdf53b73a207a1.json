{"ast":null,"code":"var __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport React, { useEffect, useRef, useState } from \"react\";\nimport fetch from \"node-fetch\";\nimport useSWR from \"swr\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TableContainer, Paper, FormControl, InputLabel, Select, MenuItem, Input, Chip, TextField, DialogActions, Button, Grid, Typography, DialogContentText, DialogContent, DialogTitle, Dialog } from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nconst useStyles = makeStyles(theme => ({\n  table: {\n    padding: \"5%\"\n  },\n  form: {\n    display: 'flex',\n    flexFlow: 'column'\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  chip: {\n    margin: 2\n  },\n  field: {\n    margin: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(2)\n  },\n  removeBtn: {\n    margin: theme.spacing(2),\n    background: theme.status.danger,\n    '&:hover': {\n      background: theme.status.danger\n    }\n  }\n}));\n\nfunction EditRoom(props) {\n  const classes = useStyles();\n  const router = useRouter();\n  const {\n    0: name,\n    1: setName\n  } = useState();\n  const {\n    0: number,\n    1: setNumber\n  } = useState();\n  const {\n    0: phone,\n    1: setPhone\n  } = useState();\n  const {\n    0: replaceid,\n    1: setReplaceid\n  } = useState(\"\");\n  const {\n    0: opendialog,\n    1: setOpendialog\n  } = useState(false);\n\n  function checkStatus(res) {\n    if (res.ok) {\n      // res.status >= 200 && res.status < 300\n      return res;\n    } else {\n      return {\n        json: () => {\n          return {\n            error: res.status\n          };\n        }\n      };\n    }\n  }\n\n  const deleteRecord = () => {\n    fetch(\"http://a2017sedlja.delta-studenti.cz/projektAPI/odstranitmistnost.php?id=\" + props.query.id + \"&replaceid=\" + replaceid, {\n      method: 'POST',\n      headers: {\n        AUTHTOKEN: props.session\n      }\n    }).then(checkStatus).then(r => r.json()).then(f => {\n      if (!f.error) router.back();\n    });\n  };\n\n  const submitChanges = () => {\n    const params = new URLSearchParams();\n    params.append(\"name\", name);\n    params.append(\"number\", number);\n    params.append(\"phone\", phone);\n    fetch(\"http://a2017sedlja.delta-studenti.cz/projektAPI/upravitmistnost.php?id=\" + props.query.id, {\n      method: 'POST',\n      body: params,\n      headers: {\n        AUTHTOKEN: props.session\n      }\n    }).then(checkStatus).then(r => r.json()).then(f => {\n      if (!f.error) router.back();\n    });\n  };\n\n  let {\n    0: inputs,\n    1: setInputs\n  } = useState();\n  useEffect(() => {\n    if (props.session != null) fetch(\"http://a2017sedlja.delta-studenti.cz/projektAPI/infomistnost.php?id=\" + props.query.id, {\n      method: 'GET',\n      headers: {\n        AUTHTOKEN: props.session\n      }\n    }).then(e => e.json()).then(j => {\n      if (j !== undefined) {\n        const nameData = j[0][1];\n        const numberData = j[0][0];\n        const phoneData = j[0][2];\n        setName(nameData);\n        setNumber(numberData);\n        setPhone(phoneData);\n        setInputs({\n          name: __jsx(TextField, {\n            className: classes.field,\n            onChange: e => {\n              setName(e.target.value);\n            },\n            required: true,\n            type: \"text\",\n            id: \"name\",\n            label: \"room name\",\n            defaultValue: nameData\n          }),\n          number: __jsx(TextField, {\n            className: classes.field,\n            onChange: e => {\n              setNumber(e.target.value);\n            },\n            required: true,\n            type: \"number\",\n            id: \"number\",\n            label: \"room number\",\n            defaultValue: numberData\n          }),\n          phone: __jsx(TextField, {\n            className: classes.field,\n            onChange: e => {\n              setPhone(e.target.value);\n            },\n            type: \"number\",\n            id: \"phone\",\n            label: \"room phone\",\n            defaultValue: phoneData\n          })\n        });\n      }\n    });\n  }, [props.session]);\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.table\n  }, __jsx(Typography, {\n    className: classes.header,\n    variant: \"h4\"\n  }, \"Room ID: \" + router.query.id), __jsx(\"form\", {\n    className: classes.form,\n    onSubmit: e => {\n      e.preventDefault();\n      submitChanges();\n    }\n  }, inputs ? inputs.name : __jsx(\"a\", null, \"loading\"), inputs ? inputs.number : __jsx(\"a\", null, \"loading\"), inputs ? inputs.phone : __jsx(\"a\", null, \"loading\"), __jsx(\"input\", {\n    style: {\n      display: \"none\"\n    },\n    id: \"submit-btn\",\n    type: \"submit\"\n  })), __jsx(\"label\", {\n    htmlFor: \"submit-btn\"\n  }, __jsx(Button, {\n    className: classes.button,\n    variant: \"contained\",\n    color: \"primary\",\n    component: \"span\"\n  }, \"Save\")), __jsx(\"label\", null, __jsx(Button, {\n    onClick: () => setOpendialog(true),\n    className: classes.removeBtn,\n    variant: \"contained\",\n    color: \"primary\",\n    startIcon: __jsx(DeleteIcon, null),\n    component: \"span\"\n  }, \"Delete\"))), __jsx(Dialog, {\n    open: opendialog,\n    \"aria-labelledby\": \"form-dialog-title\"\n  }, __jsx(DialogTitle, {\n    id: \"form-dialog-title\"\n  }, \"Replacement for this room\"), __jsx(DialogContent, null, __jsx(DialogContentText, null, \"To delete this room, you first must set new ID for all people who works there.\"), __jsx(TextField, {\n    defaultValue: replaceid,\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"replaceid\",\n    label: \"New ID\",\n    type: \"number\",\n    fullWidth: true,\n    onChange: e => setReplaceid(e.target.value)\n  })), __jsx(DialogActions, null, __jsx(Button, {\n    onClick: () => setOpendialog(false),\n    color: \"primary\"\n  }, \"Cancel\"), __jsx(Button, {\n    disabled: replaceid == \"\" ? true : false,\n    onClick: deleteRecord,\n    color: \"primary\"\n  }, \"Delete\"))), __jsx(\"p\", null, \"Hello Next.js\"));\n}\n\nEditRoom.getInitialProps = ({\n  query\n}) => {\n  return {\n    query: query\n  };\n};\n\nexport default EditRoom;","map":null,"metadata":{},"sourceType":"module"}