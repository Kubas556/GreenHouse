{"ast":null,"code":"var __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport React, { useEffect, useRef, useState } from \"react\";\nimport fetch from \"node-fetch\";\nimport useSWR from \"swr\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TableContainer, Paper, FormControl, InputLabel, Select, MenuItem, Input, Chip, TextField, Button, Grid, Typography } from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nconst useStyles = makeStyles(theme => ({\n  table: {\n    padding: \"5%\"\n  },\n  form: {\n    display: 'flex',\n    flexFlow: 'column'\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  chip: {\n    margin: 2\n  },\n  field: {\n    margin: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(2)\n  },\n  removeBtn: {\n    margin: theme.spacing(2),\n    background: theme.status.danger,\n    '&:hover': {\n      background: theme.status.danger\n    }\n  }\n}));\n\nfunction AddRoom(props) {\n  const classes = useStyles();\n  const router = useRouter();\n  const {\n    0: rooms,\n    1: setRooms\n  } = useState([]);\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState();\n  const {\n    0: username,\n    1: setUsername\n  } = useState(null);\n  const {\n    0: password,\n    1: setPassword\n  } = useState(null);\n  const {\n    0: firstname,\n    1: setFirstname\n  } = useState(null);\n  const {\n    0: lastname,\n    1: setLastname\n  } = useState(null);\n  const {\n    0: pos,\n    1: setPos\n  } = useState(null);\n  const {\n    0: sallary,\n    1: setSallary\n  } = useState(null);\n  const {\n    0: room,\n    1: setRoom\n  } = useState(null);\n  const {\n    0: admin,\n    1: setAdmin\n  } = useState(null);\n  useEffect(() => {\n    if (props.session !== null) fetch(\"http://a2017sedlja.delta-studenti.cz/projektAPI/mistnosti.php\", {\n      method: 'GET',\n      headers: {\n        AUTHTOKEN: props.session\n      }\n    }).then(checkStatus).then(d => d.json()).then(j => {\n      let fetchdata = j;\n\n      if (!fetchdata) {//setTableData([\"loading\"]);\n      } else if (fetchdata.error) {//setTableData([{0:fetchdata.error}]);\n      } else {\n        setRooms(fetchdata);\n        fetch(\"http://a2017sedlja.delta-studenti.cz/projektAPI/infoclovek.php?id=\" + props.query.id, {\n          method: 'GET',\n          headers: {\n            AUTHTOKEN: props.session\n          }\n        }).then(e => e.json()).then(j => {\n          if (j !== undefined) {\n            const _username = j[0][0];\n            const _password = j[0][1];\n            const _firstname = j[0][2];\n            const _lastname = j[0][3];\n            const _position = j[0][4];\n            const _sallary = j[0][5];\n            const _room = j[0][6];\n            const _admin = j[0][7];\n            setUsername(_username);\n            setPassword(_password);\n            setFirstname(_firstname);\n            setLastname(_lastname);\n            setPos(_position);\n            setSallary(_sallary);\n            setRoom({\n              id: _room,\n              name: fetchdata.filter(r => r[3] == _room)[0][1]\n            });\n            setAdmin(_admin);\n            setInputs({\n              username: __jsx(TextField, {\n                className: classes.field,\n                onChange: e => {\n                  setUsername(e.target.value);\n                },\n                defaultValue: _username,\n                required: true,\n                type: \"text\",\n                id: \"username\",\n                label: \"username\"\n              }),\n              password: __jsx(TextField, {\n                className: classes.field,\n                onChange: e => {\n                  setPassword(e.target.value);\n                },\n                defaultValue: _password,\n                required: true,\n                type: \"text\",\n                id: \"password\",\n                label: \"password\"\n              }),\n              firstname: __jsx(TextField, {\n                className: classes.field,\n                onChange: e => {\n                  setFirstname(e.target.value);\n                },\n                defaultValue: _firstname,\n                required: true,\n                type: \"text\",\n                id: \"firstname\",\n                label: \"firstname\"\n              }),\n              lastname: __jsx(TextField, {\n                className: classes.field,\n                onChange: e => {\n                  setLastname(e.target.value);\n                },\n                defaultValue: _lastname,\n                required: true,\n                type: \"text\",\n                id: \"lastname\",\n                label: \"lastname\"\n              }),\n              position: __jsx(TextField, {\n                className: classes.field,\n                onChange: e => {\n                  setPos(e.target.value);\n                },\n                defaultValue: _position,\n                required: true,\n                type: \"text\",\n                id: \"pos\",\n                label: \"position\"\n              }),\n              sallary: __jsx(TextField, {\n                className: classes.field,\n                onChange: e => {\n                  setSallary(e.target.value);\n                },\n                defaultValue: _sallary,\n                required: true,\n                type: \"number\",\n                id: \"sallary\",\n                label: \"sallary\"\n              })\n            });\n          }\n        });\n      }\n    });\n  }, [props.session]);\n\n  function checkStatus(res) {\n    if (res.ok) {\n      // res.status >= 200 && res.status < 300\n      return res;\n    } else {\n      return {\n        json: () => {\n          return {\n            error: res.status\n          };\n        }\n      };\n    }\n  }\n\n  const deleteRecord = () => {\n    fetch(\"http://a2017sedlja.delta-studenti.cz/projektAPI/odstranitcloveka.php?id=\" + props.query.id, {\n      method: 'POST',\n      headers: {\n        AUTHTOKEN: props.session\n      }\n    }).then(checkStatus).then(r => r.json()).then(f => {\n      if (!f.error) router.back();\n    });\n  };\n\n  const submitChanges = () => {\n    const params = new URLSearchParams();\n    params.append(\"username\", username);\n    params.append(\"password\", password);\n    params.append(\"firstname\", firstname);\n    params.append(\"lastname\", lastname);\n    params.append(\"pos\", pos);\n    params.append(\"sallary\", sallary);\n    params.append(\"room\", room.id);\n    params.append(\"admin\", admin);\n    params.append(\"id\", props.query.id);\n    fetch(\"http://a2017sedlja.delta-studenti.cz/projektAPI/upravitcloveka.php\", {\n      method: 'POST',\n      body: params,\n      headers: {\n        AUTHTOKEN: props.session\n      }\n    }).then(checkStatus).then(r => r.json()).then(f => {\n      if (!f.error) router.back();\n    });\n  };\n\n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250\n      }\n    }\n  };\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.table\n  }, __jsx(Typography, {\n    className: classes.header,\n    variant: \"h4\"\n  }, \"Person ID: \" + props.query.id), __jsx(\"form\", {\n    className: classes.form,\n    onSubmit: e => {\n      e.preventDefault();\n      submitChanges();\n    }\n  }, inputs ? inputs.username : __jsx(\"a\", null, \"loading\"), inputs ? inputs.password : __jsx(\"a\", null, \"loading\"), inputs ? inputs.firstname : __jsx(\"a\", null, \"loading\"), inputs ? inputs.lastname : __jsx(\"a\", null, \"loading\"), inputs ? inputs.position : __jsx(\"a\", null, \"loading\"), inputs ? inputs.sallary : __jsx(\"a\", null, \"loading\"), __jsx(FormControl, {\n    className: classes.field,\n    required: true\n  }, __jsx(InputLabel, {\n    id: \"keys-label\"\n  }, \"room\"), __jsx(Select, {\n    id: \"demo-mutiple-chip\",\n    labelId: \"keys-label\",\n    value: room,\n    onChange: e => {\n      setRoom(e.target.value);\n    },\n    input: __jsx(Input, {\n      id: \"select-multiple-chip\"\n    }),\n    renderValue: selected => __jsx(\"div\", {\n      className: classes.chips\n    }, __jsx(Chip, {\n      key: selected,\n      label: selected.name,\n      className: classes.chip\n    })),\n    MenuProps: MenuProps\n  }, rooms.map(room => __jsx(MenuItem, {\n    key: room,\n    value: {\n      id: room[3],\n      name: room[1]\n    }\n  }, room[1])))), __jsx(TextField, {\n    className: classes.field,\n    value: admin,\n    onChange: e => {\n      setAdmin(e.target.value);\n    },\n    select: true,\n    required: true,\n    id: \"admin\",\n    label: \"admin\"\n  }, __jsx(MenuItem, {\n    value: 1\n  }, \"True\"), __jsx(MenuItem, {\n    value: 0\n  }, \"False\")), __jsx(\"input\", {\n    style: {\n      display: \"none\"\n    },\n    id: \"submit-btn\",\n    type: \"submit\"\n  })), __jsx(\"label\", {\n    htmlFor: \"submit-btn\"\n  }, __jsx(Button, {\n    className: classes.button,\n    variant: \"contained\",\n    color: \"primary\",\n    component: \"span\"\n  }, \"Save\")), __jsx(\"label\", null, __jsx(Button, {\n    onClick: deleteRecord,\n    className: classes.removeBtn,\n    variant: \"contained\",\n    color: \"primary\",\n    startIcon: __jsx(DeleteIcon, null),\n    component: \"span\"\n  }, \"Delete\"))), __jsx(\"p\", null, \"Hello Next.js\"));\n}\n\nAddRoom.getInitialProps = ({\n  query\n}) => {\n  return {\n    query: query\n  };\n};\n\nexport default AddRoom;","map":null,"metadata":{},"sourceType":"module"}