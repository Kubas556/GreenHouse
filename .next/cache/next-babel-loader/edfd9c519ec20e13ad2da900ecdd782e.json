{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { lightTheme, darkTheme } from '../components/Theme';\nimport CustomAppBar from \"../components/CustomAppBar\";\nimport { Switch, FormControlLabel, Box } from \"@material-ui/core\";\nimport { auth } from '../firebase/index';\nexport default function MyApp(props) {\n  var _useState = useState(false),\n      theme = _useState[0],\n      setTheme = _useState[1];\n\n  var _useState2 = useState(true),\n      showBtn = _useState2[0],\n      setShowBtn = _useState2[1];\n\n  var themeReg = /theme=(\\w+)/;\n  var router = useRouter();\n  useEffect(function () {\n    var themeCookie = document.cookie.match(themeReg);\n    if (themeCookie) setTheme(JSON.parse(themeCookie[1])); // Remove the server-side injected CSS.\n\n    var jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }, []);\n\n  var switchTheme = function switchTheme() {\n    document.cookie = 'theme=' + !theme;\n    setTheme(!theme);\n  };\n\n  function toggleThemeSwitch(value) {\n    setShowBtn(value);\n  }\n\n  ;\n  var Component = props.Component,\n      pageProps = props.pageProps;\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My page\"), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n  })), __jsx(ThemeProvider, {\n    theme: theme ? darkTheme : lightTheme\n  }, __jsx(CssBaseline, null), showBtn ? __jsx(CustomAppBar, {\n    text: \"Some name\"\n  }) : null, __jsx(Box, {\n    height: \"100%\"\n  }, __jsx(Component, _extends({}, pageProps, {\n    theme: theme,\n    setThemeBtn: toggleThemeSwitch\n  }))), showBtn ? __jsx(FormControlLabel, {\n    labelPlacement: \"start\",\n    label: \"Dark mode\",\n    control: __jsx(Switch, {\n      checked: theme,\n      onChange: switchTheme.bind(this)\n    })\n  }) : null));\n}","map":null,"metadata":{},"sourceType":"module"}