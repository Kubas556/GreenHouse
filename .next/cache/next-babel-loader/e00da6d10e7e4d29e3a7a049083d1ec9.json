{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport anime from \"animejs\";\n\nfunction Termostat(props) {\n  var min = 0;\n  var max = 50;\n  var minAngle = 0;\n  var maxAngle = 180;\n  var segCount = 22; //11;\n\n  var initValue = props.defaultValue;\n  var lines = useRef(null);\n  var valueInput = useRef(null);\n  var hand = useRef(null);\n  var handle = useRef(null);\n\n  var _useState = useState(),\n      containers = _useState[0],\n      setContainers = _useState[1];\n\n  var _useState2 = useState(),\n      lastNode = _useState2[0],\n      setLastNode = _useState2[1];\n\n  var _useState3 = useState(0),\n      lastNodeAngle = _useState3[0],\n      setLastNodeAngle = _useState3[1];\n\n  var _useState4 = useState(0),\n      angleTrans = _useState4[0],\n      setAngleTrans = _useState4[1];\n\n  var _useState5 = useState(0),\n      currentAngle = _useState5[0],\n      setCurrentAngle = _useState5[1];\n\n  var _useState6 = useState(0),\n      handAngle = _useState6[0],\n      setHandAngle = _useState6[1];\n\n  var _useState7 = useState(0),\n      currentValue = _useState7[0],\n      setCurrentValue = _useState7[1];\n\n  var _useState8 = useState(false),\n      drag = _useState8[0],\n      setDrag = _useState8[1];\n\n  function inputUpdated(e) {\n    var val = e.target.value;\n    setCurrentValue(val);\n    setCurrentAngle(maxAngle / max * val);\n  }\n\n  function onMove(e) {\n    if (drag) {\n      var angle = Math.atan2(e.nativeEvent.offsetY - 250, e.nativeEvent.offsetX - 250);\n      var angle2 = angle * (180 / Math.PI); //to 360 range\n\n      if (angle2 < 0) {\n        angle2 = 360 - -angle2;\n      } //set 0 angle\n\n\n      angle2 += 180; //corect angle\n\n      if (angle2 > 360) angle2 -= 360;\n\n      if (angle2 >= 0 && angle2 <= maxAngle) {\n        setCurrentValue(Math.round(max / maxAngle * angle2));\n        setAngleTrans(angle2);\n        setHandAngle(angle2);\n      }\n    }\n  }\n\n  function onDrag(e) {\n    if (!drag) {\n      setDrag(true);\n      if (handle.current) handle.current.style.pointerEvents = \"none\";\n    }\n  }\n\n  function onDragEnd(e) {\n    if (drag) {\n      setDrag(false);\n      if (handle.current) handle.current.style.pointerEvents = \"all\";\n    }\n  }\n\n  useEffect(function () {\n    if (containers) {\n      var angle = Math.round(handAngle);\n\n      if (angle <= maxAngle && angle >= minAngle) {\n        for (var i = 0; i < containers.length; i++) {\n          var containerAngle = _parseInt(containers[i].getAttribute('rotate'));\n\n          if (containerAngle > lastNodeAngle && containerAngle <= angle || containerAngle < lastNodeAngle && angle <= containerAngle) {\n            anime({\n              targets: lastNode,\n              scale: [{\n                value: 1,\n                easing: 'easeInOutQuad',\n                duration: 500\n              }],\n              delay: 0\n            });\n            anime({\n              targets: containers[i].childNodes,\n              scale: [{\n                value: 1.5,\n                easing: 'easeOutSine',\n                duration: 500\n              }],\n              delay: 0\n            });\n            setLastNode(containers[i].childNodes[0]);\n            setLastNodeAngle(containerAngle);\n            break;\n          }\n        }\n\n        ;\n        if (hand.current) hand.current.style.transform = \"rotate(\" + angle + \"deg)\";\n      }\n    }\n  }, [handAngle]);\n  useEffect(function () {\n    var anim = {\n      value: angleTrans\n    };\n    anime({\n      targets: anim,\n      value: currentAngle,\n      easing: \"linear\",\n      duration: 500,\n      update: function update() {\n        //updateHandAngle(anim.value);\n        setHandAngle(anim.value);\n      },\n      complete: function complete() {\n        setAngleTrans(currentAngle);\n      }\n    });\n  }, [currentAngle]);\n  useEffect(function () {\n    if (valueInput.current) valueInput.current.value = currentValue.toString();\n  }, [currentValue]);\n  useEffect(function () {\n    var j = 0;\n\n    for (var i = 0; i < segCount; i++) {\n      var _handAngle = Math.round(maxAngle / max * j);\n\n      var line = '<div rotate=' + _handAngle + ' style=\"transform:rotate(' + _handAngle + 'deg)!important;\" class=\"lineContainer\"><div class=\"line\"></div></div>';\n      if (lines.current) lines.current.innerHTML += line;\n      j += max / (segCount - 1);\n    }\n\n    var contData = document.getElementsByClassName('lineContainer');\n    var initlastNode = contData[0].childNodes[0];\n    var initLastNodeAngle = 0;\n    anime({\n      targets: contData[0].childNodes[0],\n      scale: [{\n        value: 1.5,\n        easing: 'easeOutSine',\n        duration: 500\n      }],\n      delay: 0\n    });\n    var lineSegs = document.getElementsByClassName(\"line\");\n    var first = [73, 80, 245];\n    var second = [244, 67, 54];\n\n    for (var _i = 0; _i < lineSegs.length; _i++) {\n      var percent = _i / (lineSegs.length - 1);\n      var red = first[0] + percent * (second[0] - first[0]);\n      var green = first[1] + percent * (second[1] - first[1]);\n      var blue = first[2] + percent * (second[2] - first[2]);\n\n      lineSegs[_i].setAttribute(\"style\", \"background:\" + \"rgb(\" + red + \",\" + green + \",\" + blue + \");\");\n    }\n\n    ;\n    setContainers(contData);\n\n    var updateHandAngle = function updateHandAngle(angle) {\n      angle = Math.round(angle);\n\n      if (angle <= maxAngle && angle >= minAngle) {\n        for (var _i2 = 0; _i2 < contData.length; _i2++) {\n          var containerAngle = _parseInt(contData[_i2].getAttribute('rotate'));\n\n          if (containerAngle > initLastNodeAngle && containerAngle <= angle || containerAngle < initLastNodeAngle && angle <= containerAngle) {\n            anime({\n              targets: initlastNode,\n              scale: [{\n                value: 1,\n                easing: 'easeInOutQuad',\n                duration: 500\n              }],\n              delay: 0\n            });\n            anime({\n              targets: contData[_i2].childNodes,\n              scale: [{\n                value: 1.5,\n                easing: 'easeOutSine',\n                duration: 500\n              }],\n              delay: 0\n            });\n            initlastNode = contData[_i2].childNodes[0];\n            initLastNodeAngle = containerAngle;\n            break;\n          }\n        }\n\n        ; //document.getElementById(\"hand\").style.transform=\"rotate(\"+(angle)+\"deg)\";\n      }\n    };\n\n    var initAngleTrans = {\n      value: 0\n    };\n    anime({\n      targets: initAngleTrans,\n      value: maxAngle / max * initValue,\n      easing: \"linear\",\n      duration: 500,\n      update: function update() {\n        updateHandAngle(initAngleTrans.value);\n      },\n      complete: function complete() {\n        setLastNode(initlastNode);\n        setLastNodeAngle(initLastNodeAngle);\n        setCurrentValue(initValue);\n        setCurrentAngle(maxAngle / max * initValue);\n      }\n    });\n  }, []);\n  return __jsx(\"div\", {\n    className: \"jsx-2108097354\"\n  }, __jsx(\"div\", {\n    id: \"work\",\n    onMouseMove: onMove,\n    onMouseUp: onDragEnd,\n    className: \"jsx-2108097354\" + \" \" + \"workspace\"\n  }, __jsx(\"svg\", {\n    id: \"handPath\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 161.45 161.45\",\n    className: \"jsx-2108097354\"\n  }, __jsx(\"defs\", {\n    className: \"jsx-2108097354\"\n  }, __jsx(\"style\", null, \".pathcircle{fill:none;stroke:\" + (props.theme == 1 ? \"white\" : \"black\") + \";stroke-miterlimit:10;stroke-opacity:0.08;stroke-width:2px;}\")), __jsx(\"title\", {\n    className: \"jsx-2108097354\"\n  }, \"Datov\\xFD zdroj 22\"), __jsx(\"g\", {\n    id: \"Vrstva_2\",\n    \"data-name\": \"Vrstva 2\",\n    className: \"jsx-2108097354\"\n  }, __jsx(\"g\", {\n    id: \"Vrstva_2-2\",\n    \"data-name\": \"Vrstva 2\",\n    className: \"jsx-2108097354\"\n  }, __jsx(\"circle\", {\n    cx: \"80.73\",\n    cy: \"80.73\",\n    r: \"80.6\",\n    \"stroke-dasharray\": \"253\",\n    \"stroke-dashoffset\": \"253\",\n    className: \"jsx-2108097354\" + \" \" + \"pathcircle\"\n  })))), __jsx(\"div\", {\n    ref: lines,\n    id: \"lines\",\n    className: \"jsx-2108097354\"\n  }), __jsx(\"div\", {\n    ref: hand,\n    id: \"hand\",\n    className: \"jsx-2108097354\"\n  }, __jsx(\"svg\", {\n    ref: handle,\n    onMouseDown: onDrag,\n    id: \"handle\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 26.04 26.04\",\n    className: \"jsx-2108097354\"\n  }, __jsx(\"defs\", {\n    className: \"jsx-2108097354\"\n  }, __jsx(\"style\", null, \".handle{fill:#2196f3;}\")), __jsx(\"title\", {\n    className: \"jsx-2108097354\"\n  }, \"Datov\\xFD zdroj 25\"), __jsx(\"g\", {\n    id: \"Vrstva_2\",\n    \"data-name\": \"Vrstva 2\",\n    className: \"jsx-2108097354\"\n  }, __jsx(\"g\", {\n    id: \"Vrstva_2-2\",\n    \"data-name\": \"Vrstva 2\",\n    className: \"jsx-2108097354\"\n  }, __jsx(\"circle\", {\n    cx: \"13.02\",\n    cy: \"13.02\",\n    r: \"13.02\",\n    className: \"jsx-2108097354\" + \" \" + \"handle\"\n  })))))), __jsx(\"input\", {\n    ref: valueInput,\n    onBlur: inputUpdated,\n    type: \"number\",\n    className: \"jsx-2108097354\"\n  }), __jsx(_JSXStyle, {\n    id: \"2108097354\"\n  }, [\".workspace{background:none;height:500px;width:500px;margin:auto;position:relative;border-radius:100%;}\", \"#lines,#handPath,.lineContainer{pointer-events:none;overflow:visible;}\", \"#handPath{width:5rem;height:5rem;}\", \"#lines{position:absolute;height:0px;width:500px;margin-top:50%;}\", \".lineContainer{width:250px;position:absolute;-webkit-transform-origin:right center;-ms-transform-origin:right center;transform-origin:right center;}\", \".line{height:5px;width:3rem;margin-left:1.5rem;}\", \"#handPath{width:250px;height:250px;margin:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);position:absolute;}\", \"#hand{margin-top:50%;background:red;-webkit-transform-origin:right center;-ms-transform-origin:right center;transform-origin:right center;position:absolute;width:250px;height:0;}\", \"#handle{cursor:-webkit-grab;cursor:-moz-grab;cursor:grab;width:2rem;height:2rem;-webkit-transform:translate(50%,-50%);-ms-transform:translate(50%,-50%);transform:translate(50%,-50%);right:125px;position:absolute;}\"]));\n}\n\nexport default Termostat;","map":null,"metadata":{},"sourceType":"module"}