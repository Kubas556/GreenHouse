{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { lightTheme, darkTheme } from '../components/Theme';\nimport CustomAppBar from \"../components/CustomAppBar\";\nimport { Switch, FormControlLabel, Box } from \"@material-ui/core\";\nimport { auth } from '../firebase/index';\nexport default function MyApp(props) {\n  const {\n    0: theme,\n    1: setTheme\n  } = useState(false);\n  const {\n    0: showBtn,\n    1: setShowBtn\n  } = useState(true);\n  const themeReg = /theme=(\\w+)/;\n  const router = useRouter();\n  useEffect(() => {\n    // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  });\n\n  const switchTheme = () => {\n    document.cookie = 'theme=' + !theme;\n    setTheme(!theme);\n  };\n\n  function toggleThemeSwitch(value) {\n    setShowBtn(value);\n  }\n\n  ;\n  const {\n    Component,\n    pageProps\n  } = props;\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My page\"), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n  })), __jsx(ThemeProvider, {\n    theme: theme ? darkTheme : lightTheme\n  }, __jsx(CssBaseline, null), showBtn ? __jsx(CustomAppBar, {\n    text: \"Some name\"\n  }) : null, __jsx(Box, {\n    height: \"100%\"\n  }, __jsx(Component, _extends({}, pageProps, {\n    setThemeBtn: toggleThemeSwitch\n  }))), showBtn ? __jsx(FormControlLabel, {\n    labelPlacement: \"start\",\n    label: \"Dark mode\",\n    control: __jsx(Switch, {\n      checked: theme,\n      onChange: switchTheme.bind(this)\n    })\n  }) : null));\n}","map":null,"metadata":{},"sourceType":"module"}